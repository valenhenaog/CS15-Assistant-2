              CS 15 Project 4: gerp

Introduction

We’re all familiar with web search engines, and we also have tools for searching our personal
computers. Have you ever wondered how the Mac Spotlight works, for example? We’ll look at
one approach now! In this assignment you will design and implement a program that indexes and
searches files for strings. Your program will behave similarly to the unix grep program, which can
search through all the files in a directory and look for a sequence of characters.


Background: grep
Here’s an example of calling unix grep:
grep -IRn Query DirectoryToSearch


In this example:

    • grep is the program we’re calling

    • Query is the target string we’re searching for

    • DirectoryToSearch is the directory where we will look for the Query

    • the option I means to search all files, including binary files

    • the option R means to traverse all files under the provided directory recursively (including
      following symbolic links)

    • the option n means to print each output line from grep with the line number of the match of
      the “Query” within the matched file.

For example,
grep -IRn #include /comp/15/files


will produce something like

/comp/15/files/hw1/CharArrayList.cpp:12:#include "CharArrayList.h"
/comp/15/files/hw1/simple_exception.cpp:27:#include <iostream>
/comp/15/files/hw1/simple_exception.cpp:28:#include <string>
/comp/15/files/hw1/simple_exception.cpp:29:#include <stdexcept>
/comp/15/files/hw1/unit_tests.h:15:#include "CharArrayList.h"
/comp/15/files/hw1/unit_tests.h:16:#include <cassert>
/comp/15/files/lab2/LinkedList.cpp:13:#include "LinkedList.h"
/comp/15/files/lab2/LinkedList.cpp:14:#include <sstream>
/comp/15/files/lab2/LinkedList.cpp:15:#include <string>
/comp/15/files/lab2/LinkedList.h:15:#include "Planet.h"
/comp/15/files/lab2/Planet.cpp:11:#include "Planet.h"
/comp/15/files/lab2/Planet.cpp:12:#include <sstream>
/comp/15/files/lab2/Planet.cpp:13:#include <string>
/comp/15/files/lab2/Planet.h:14:#include <string>
/comp/15/files/lab2/planet-driver.cpp:14:#include "LinkedList.h"
/comp/15/files/lab2/planet-driver.cpp:15:#include "Planet.h"
/comp/15/files/lab2/planet-driver.cpp:16:#include <iostream>
/comp/15/files/lab2/unit_tests.h:6:#include "LinkedList.h"
/comp/15/files/lab2/unit_tests.h:7:#include "Planet.h"
/comp/15/files/lab2/unit_tests.h:8:#include <cassert>
/comp/15/files/lab2/unit_tests.h:9:#include <iostream>
/comp/15/files/hw2/CharLinkedList.cpp:12:#include "CharLinkedList.h"
/comp/15/files/lab0/welcome.cpp:7:#include <iostream>
/comp/15/files/lab1/ArrayList.cpp:15:#include "ArrayList.h"
/comp/15/files/lab1/ArrayList.cpp:16:#include <sstream>
/comp/15/files/lab1/ArrayList.h:14:#include <string>
/comp/15/files/lab1/unit_tests.h:19: * Be sure to #include any .h files as necessary
/comp/15/files/lab1/unit_tests.h:37:#include "ArrayList.h"
/comp/15/files/lab1/unit_tests.h:38:#include <cassert>
/comp/15/files/lab1/unit_tests.h:39:#include <iostream>
/comp/15/files/lab1/unit_tests.h:40:#include <string>
/comp/15/files/compilation_tests/hw1_test.cpp:13:#include <iostream>
/comp/15/files/compilation_tests/hw1_test.cpp:14:#include "CharArrayList.h"
/comp/15/files/compilation_tests/hw2_test.cpp:14:#include "CharLinkedList.h"
/comp/15/files/compilation_tests/hw2_test.cpp:13:#include <iostream>


The first line of this output tells you that #include can be found on line 12 of the file located at
/comp/15/files/hw1/CharArrayList.cpp, and that the line itself is #include "CharArrayList.h".
Although there are many optional flags you might use with grep (see https://linux.die.net/
man/1/grep for the details), our gerp program is designed to replicate the core functionality above,
with a twist!


Program Design Overview
How might we build something like this? We will start by limiting the constraints of our solution—
whereas grep produces near-instantaneous results of matches at each run of the program, we will
take a two-step approach with gerp:

    1 Build a data structure that indexes a set of files

    2 Use that index to respond to queries

That is, when gerp is run, it will require the user to provide a directory up front. Your first task
will thus be to process the files of that directory (including subdirectories). You will then enter
a loop where the user provides queries that your program will (quickly) answer. The queries are
effectively searches for words in the indexed files. Described in English, a query might be: “Tell
me all the files that have the word ‘potato’ inside the directory /comp/15.”
    While processing the files, you might find it useful to store information about those files such
as their names, their relative paths on the filesystem, and information about their contents, in
one or more data structure(s) that is/are easily searched and queried. The choice of data
structure(s) for this assignment is up to you!
    That said, we have provided you with modules to help with indexing files (see Building the Index
section below). Also, for this assignment, you may use certain classes from the C++ Standard Tem-
plate Libary (STL). Descriptions of the STL implemetations that you are allowed to use are listed
in their own section named STL Usage.
    To help you learn the interface and get a feel for the program, we have also provided you with
a working reference implementation. For help on how to test your work agains the reference, see
the section
Testing and Reference Implementation.


Files to Implement
We will not specify most of the files or functions you will need to write. Instead, your program
is required to function as described in this specification. You may accomplish this task using any
combination of files, functions, and classes you wish. We will, of course, evaluate your design.
    However, in addition to writing .h and .cpp files for your classes, you will need to write a
main() for your program, and write a Makefile. The default make action should be to compile
and link the entire program, and to produce an executable program named gerp, which you can
run by typing ./gerp in the terminal. If you have a clean target in your Makefile, be sure you
do not delete the .o files we give to you.
    You will want to write code to test the various parts of your program separately so that you
do not have to debug compound errors. To that end, you are encouraged to use the unit_test
framework to unit test your classes; however, testing details will be up to you. As usual, you will
also be required to submit a README. See the README section for details.


Pair Programming
For this project, you will be working together with a partner! You will be responsible for choosing
your partner. It is essential that you and your partner have compatible working schedules, because
you are required to work together for all stages of the project. For more information on our pair
programming guidelines, see our reference document.


Starter Files
To copy the starter files, run the following command on the server
/comp/15/files/proj_gerp/setup

Note that you should not run cp except in the following situation.
   Sometimes strange things happen with the provided object (.o) files. For example, students
may accidentally try to re-compile the files or add incorrect (and unnecessary) Makefile rules for
them. If you see something weird going on with any of the provided .o files, copy the original files
back into your directory with:
cp /comp/15/files/proj_gerp/*.o .

This is generally the first thing a TA would try.
Program Specification

Introduction
Your program will be run from the command line like this:
./gerp DirectoryToIndex OutputFile

where DirectoryToIndex determines which directory will be traversed and indexed, e.g. /comp/15/files,
and OutputFile names the file to which the query results will be sent.
   If the user did not specify exactly two command line arguments (in addition to the program
name), print this message to std::cerr:
Usage: ./gerp inputDirectory outputFile

and terminate the program by returning EXIT_FAILURE from main.
     After being called, your program will first traverse a file tree created using a module provided
by the course staff (details are in the section titled Building the Index below). It will index each
file that it finds in the tree. After indexing all of the files, it will enter a command loop (similar
to the “interactive” modes that you have implemented in previous homeworks) where the user can
enter various commands to modify the search, and to quit the program.


Command Loop
Specifically, your program will print Query? followed by a single space to std::cout (NOT to the
OutputFile), and then wait for a command from the user. The possible query commands are:
   • AnyString
     A word (see the What is a Word? section below)is treated as a query. The program will take
     this string and print all of the lines in the indexed files where AnyString appears. Note that
     this is a case sensitive search, so we and We are treated as different strings/words, and so
     should have different results.

   • @i AnyString or @insensitive AnyString
     Preceeding a query string by @i or @insensitive causes the program to perform a case
     insensitive search on the string that was passed. For example, we and We would be treated as
     the same string/word and will have the same results.

   • @q or @quit
     These commands will completely quit the program, and print:
     Goodbye! Thank you and have a nice day.
     This statement should be followed by a new line. Note that the program should also quit if
     it reaches End-Of-File (EOF).

                                                  5
   • @f newOutputFilename
     This command causes the program to close the current output file. Any future output should
     be written to the file named
     newOutputFilename.

Beware!
Beware! There are two output streams.
   • The “Query? ” prompt always goes to std::cout

   • The result of the query always goes to the output file, which will either be the OutputFile
     or the file named in the last @f command.
Also, treat a multi-word query as several independent 1-word queries - e.g.
         Query? We are the champions
is the same as
         Query? We
         Query? are
         Query? the
         Query? champions
Note, as seen when running the reference implementation, that this will actually appear as:
         Query? we are the champions
         Query? Query? Query? Query?


Output Formatting
If the word (see the What is a Word? section below) in a query is found in the index, then, for
each line it appears in, you will print to the designated output file a line of the form:
FileNameWithPath:LineNum: Line

Where:
  1. FileNameWithPath is the full pathname of the file (including the path from the command
     line), followed by a colon

  2. LineNum is the line number within that file that the query word appears on, followed by a
     colon and a space

  3. Line is the full text of the line from the file

  4. A newline
   For example, if you ran
$ ./gerp small_test out.txt
Query? we

which queries we on our small_test directory, and then sends output to the file out.txt, the file
out.txt might read:
small_test/test.txt:5: we are the champions
small_test/test.txt:6: we we we


                                                  6
NOTE: There is one newline after the last line. Also, each line that the query appears in only
prints once. If the query is not found using the default search, then print:
query Not Found. Try with @insensitive or @i.

If the query is not found using the insensitive search, then print:
query Not Found.



What is a Word?
It is important to outline what a word is when dealing with a word search engine. We will define
a word as a string that starts and ends with an alphanumeric (letter or number)
character. This means that you will need to do a little string parsing to determine the output of
your gerp implementation. To help you with this nuance we have included a couple of examples.
     When searching for the word comp using case insensitive search, gerp should treat the following
strings as comp:

   • comp

   • comp.

   • Comp

   • -comp

   • &&comp

   • comp?!

   • @#comp?@!

If any of the bulleted strings were submitted as a query, gerp should print the lines in files that
contain any of the strings on the list (however, it should print them as they exist in the file, not a
processed version).
    Note that gerp should only compare strings where all leading and trailing non-
alphanumeric characters are stripped. This includes both the queries and the strings
in the data files.
    Note that words can contain non alphanumeric characters in the middle. For instance, comp&!$15
is considered all one word. It should not be split into two queries as with spaces.


Building the Index
You do NOT need to write the FSTree or DirNode classes described below
- we have implemented them for you. However, they will be critical to the
success of your project!
FSTree
We will use a file-system tree to represent directories, subdirectories, and files. The data structure
we will use is an n-ary tree, so called because a node of the tree could have any number of children.
The main usage of this class is to help you navigate through folders and directories inside the
computer. For example, a snapshot of a home directory might be represented in an n-ary tree like
this:
/h/mkorman
       /coursework
              /comp11
              /comp15
                     /exams
                     /labs
                     /assignments
                     /hws
              /comp160
                     /hw
       /public_html

Specifically, a FSTree is an n-ary tree which consists of DirNodes (which are described below). The
FSTree class has the following public functions:

   • FSTree(std::string rootName)
     This is the constructor of the FSTree. It creates a file tree of DirNodes where the root of the
     tree is the directory that is passed as the parameter rootName. If there is an error opening
     directories or files, the constructor will fail and halt your program. Be careful and do not run
     this on just any directory - if a directory structure has a loop in it, the constructor can run
     forever!

   • ∼FSTree()
     The destructor deallocates all of the space allocated when the tree was built.

   • DirNode *getRoot()
     This function returns the root of the tree. Normally, we do not want to return the private
     members of an object or class, however in this case it is necessary so that you can traverse
     the tree and index its contents.

DirNode
The DirNode class is the key building block of the FSTree class. It is our representation of a folder.
Each DirNode instance has: a name, a list of files in the directory, and a list of subdirectories. It
contains the following public methods:

   • bool hasSubDir()
     Returns true if there are any sub-directories in this directory.

   • bool hasFiles()
     Returns true if there are files in this directory.

   • bool isEmpty()
     Returns true if there are no files or sub-directories in this directory.
   • int numSubDir()
     Returns the number of sub directories in this directory.

   • int numFiles()
     Returns the number of files in this directory.

   • std::string getName()
     Returns the name of this directory.

   • DirNode *getSubDir(int n)
     Returns a pointer to the nth subdirectory.

   • std::string getFile(int n)
     Returns the nth file name in this directory.

   • DirNode *getParent()
     Get the parent directory of this directory.

The DirNode class contains other public functions that are necessary for our implementation of
FSTree. You should not have to use them. In order to get a file’s full path, you will need to
traverse the FSTree and concatenate the names of the directories you enounter along the way. You
will then use this full path to open the file in an std::ifstream and index its contents.


STL Usage
For this assignment, you will be allowed to use ONLY the following STL implementations:

   • vector

   • queue

   • stack

   • set

   • list

   • functional

You may also find certain function(s) in the cctype library useful. You are also allowed to use pair
from utility. That being said, you could easily make your own struct. If you have questions
about using a particular library or class, clarify with a TA first. In general, if using something
makes all or part of the assignment trivial, we will likely say no (e.g. you can’t use unorderedmap).
    You are not required to use any particular item of the STL. If you feel that one or more of
these would be useful, you will need to learn about their respective interfaces. You can find more
information about them at:
    http://www.cplusplus.com/reference
Any other data structures that you need you must implement yourself. Moreover, you may not
use any kind of parallel programming or concurrency in your implementation.
Compiler Options
When compiling your implementation of gerp, you should compile with the flag -O2 (That’s a
captial letter ‘O’, not the numeral zero). This will optimize your program for the system that it is
compiling on, which will result in an implementation with a faster runtime. This will help during
the testing phase because you will receive your results faster.
