PROJECT METROSIM




Getting Started

   You can get the starter files by running the following command:
/comp/15/files/proj_metrosim/setup

Note that you should not manually run cp, but rather run the above program. The files will be copied
for you.
The Reference Implementation
After running the above command, you will have access to a reference implementation of the program
named the_MetroSim. We strongly encourage you to play around with it both to learn what is
expected of your program and to test your your program. We will be comparing your program’s
output to the reference, so be sure that you are adhering to the output format. If the diff command
reports any differences between the output of your implementation and the reference implementation,
then you will lose points on the functional correctness portion of your implementation assessment.
Refer to the Testing section in this document for more information.
   The setup script makes a link to the reference implementation rather than your own copy. You
use it exactly the same as you would use any other program, but this will guarantee you always use




                                                  10
the most recent version.




Design Checkoff (Required)

    First, complete the required design checkoff questions given in the starter file metro design checkoff.txt,
and submit your answers on Gradescope under the assignment “MetroSim Design Checkoff.”
    You must submit this file prior to meeting with a TA.
    Then, go to office hours and talk to a TA about your plan. You should be prepared to discuss the
answers you submitted. You are welcome to bring other materials as well, though you are not required
to: drawings, pseudocode, etc.
    The design checkoff helps twofold: you plan out your project and get your brain working on it in the
background, and you also get design feedback before it’s too late. TAs will check off your design, but
reserve the right to not check off your design if they believe your design was not thoroughly mapped
out enough.
    Please sign up for a design check off on the form linked here.
    Note: it is completely okay to deviate from this initial plan. In fact, we encourage you to continue
to evaluate the structure of your solution and fine-tune it as you go – that’s what programmers do in
the real world, anyway. The purpose of this check-off is more to help you establish a game plan, as
well as clear up any misconceptions you may have.




Phase One (Required)

   For phase one of this project, you must complete the implementations of Passenger and PassengerQueue,
and you must thoroughly test these classes. See the course calendar for the due date.




Testing

    Test thoroughly and incrementally. You should be sure that your PassengerQueue behaves as
intended before you start implementing your MetroSim. Your program will have many components—
it will be significantly easier to debug issues if you test components as you implement them, rather
than implementing everything then testing at the end.


                                                  11
CONTENTS                                                                                             12


    Use the unit testing skills that you have developed in the first assignment. You can place all tests
in the file unit_tests.h, which we provide for you. Just make sure to #include any corresponding
.h files needed for the tests, and to update the dependencies for the unit_test rule in the Makefile
(see Makefile section, below).
    We also note that you are not required to use our unit_test framework. Alternatively, you can
create your own testing file, with its own main() function that calls out to testing functions. Then,
you’ll have to compile your code with the testing main function instead of the simulator main. The
choice of how to test your program is up to you—but either way, you must test your program!
    Note that many functions within your MetroSim implementation will likely be private; this means
that you cannot test them directly from a testing function in another file. You have two options:
   1. Test private functions indirectly via public functions.

  2. Temporarily make the private functions public to test them, and then make them private once
     you have tested them (make sure you don’t forget to make them private again!).

    After you have written and debugged the PassengerQueue class and other classes, and you have an
implementation of MetroSim that you think works as expected, the best way to test your results will be
to compare the output from your implementation with the output from the reference implementation.
Your output and the reference implementation’s output must match exactly. Here are some tips to
help you compare your implementation to the reference:

   • Redirecting the standard output stream (std::cout) to a file using the > symbol on the command
     line.
     In the following example, we run MetroSim with stations.txt as the stations file, output.txt
     as the output file, and commands.txt as the commands file. Any output that MetroSim sends
     to std::cout will be saved in stdout.txt.
     ./MetroSim stations.txt output.txt commands.txt > stdout.txt


   • Redirecting the contents of a file into the standard input stream (std::cin) using the < symbol
     on the command line.
     In the following example, we run MetroSim with stations.txt as the stations file, output.txt
     as the output file. We are not passing commands.txt as a command-line parameter; rather, we
     are sending the contents of the commands.txt file to std::cin of the MetroSim program.
     ./MetroSim stations.txt output.txt < commands.txt


   • Redirecting both the standard output (std::cout) and standard input (std::cin) streams.
     ./MetroSim stations.txt output.txt < commands.txt > stdout.txt


     With the above example, any time that MetroSim tries to read from std::cin, it is actually read-
     ing from commands.txt. Any output that MetroSim sends to std::cout is saved in stdout.txt.

   • Using diff command to compare the contents of two files.
     It is highly recommended that you compare your output files with that of the demo using
     diff. So, for instance, if, given the same inputs, the reference implementation produced
     stdout_demo.txt and your implementation produced stdout_personal.txt, you could com-
     pare them with the following command:
     diff stdout_demo.txt stdout_personal.txt
     It can be difficult sometimes to understand the output of diff. Here is one reference that may
     help:
     https://linuxize.com/post/diff-command-in-linux/.




Makefile

     Since you are in charge of the structure of your implementation, we cannot know exactly what
files you will have. This means you will need to update the given Makefile to build your program
correctly.
     The Makefile we provide you with already includes:
     • A MetroSim rule, with some listed dependencies, and no recipe (yet!)
   • A rule for building PassengerQueue.o
   • A unit_test rule, with some dependencies already added, which will be used by the unit_test
     program
   • A clean rule which removes object code, temporary files, and an executable named a.out (if
     one exists)
   You will need to update the Makefile with the following:

   • Every .cpp file will need a corresponding .o rule in the Makefile. This includes MetroSim.cpp,
     main.cpp, Passenger.cpp, and any new .cpp files that you write. You can use the given
     PassengerQueue.o rule as guidance.
   • The dependencies for the MetroSim and unit_test rules must be updated with the new .o files
     as needed.
   • You need to write the recipe for the MetroSim rule, which links all of the necessary .o files
     together

   We have added TODO comments throughout your Makefile, corresponding to the updates listed
above. You must make these updates!




README

    With your code files you will also submit a README file. You can format your README however you
like. However it should have the following sections:
   A The title of the homework and the author’s name (you)

                                                13
  B The purpose of the program

  C Acknowledgements for any help you received

  D The files that you provided and a short description of what each file is and its purpose

  E How to compile and run your program

   F An “architectural overview” i.e., a description of how your various program modules relate. For
     example, how you represent various structures in your implementation (e.g stations, trains).

  G An outline of the data structures and algorithms that you used. Given that this is a data struc-
    tures class, you need to always discuss the ADT that you used and the data structure that
    you used to implement it and justify why you used it. Please discuss the features of the data
    structure and also include (with some justification/explanation) two other situations/circum-
    stances/problems where you could utilize it. The algorithm overview is always relevant. Please
    pick a couple interesting/complex algorithms to discuss in the README.

  H Details and an explanation of how you tested the various parts of assignment and the program
    as a whole. You may reference the testing files that you submitted to aid in your explanation.

   I Tell us how much time you spent, in total, on this assignment in hours.

Each of the sections should be clearly delineated and begin with a section heading describing the
content of the section. You should not only have the section letter used in the outline above.




Submitting

    Be sure your files have header comments, and that those header comments include your name, the
assignment, the date, and acknowledgements for any help you received (if not already credited in the
README file).
    For phase 0, submit your complete metro design checkoff.txt file to the assignment “MetroSim
Design Checkoff” on Gradescope.
    For phase 1, you will need to submit the following files:
      Passenger.h, Passenger.cpp
      PassengerQueue.h, PassengerQueue.cpp
      unit_tests.h
      README
    You should only include other C++ files if your solution to PassengerQueue depends on them. Do
not submit MetroSim.cpp for example. You must submit them using Gradescope to the assignment
proj_metrosim_phase1. Submit these files directly, do not try to submit them in a folder. The
README doesn’t have to be the final README. Just document anything that you feel we should know
about your Passenger, PassengerQueue, or the submission in general.
    For the final submission, we don’t know exactly what files your final program will comprise. You
will need to submit at least the following files:

                                                14
CONTENTS                                                                                               15


      PassengerQueue.h, PassengerQueue.cpp
      Passenger.h, Passenger.cpp
      MetroSim.h, MetroSim.cpp
      main.cpp
      (... any other C++ source files)
      (... any testing files)
      unit_tests.h
      Makefile
      README
   You must also submit:

   • Any unit tests you write for your program. This may be done in a file called unit_tests.h,
     using the unit_test framework that we have used on past assignments. Alternatively, you can
     create your own testing main functions, e.g., submit a file called MetroSim_tests.cpp with a
     main function that calls out to tests. Whatever testing files you use, you must submit them!

   • Any command files (excluding the command file provided).

    You must submit them using Gradescope to the assignment proj_metrosim. Note, you only need
to include testing input files. For example, input stations or commands files you used. You do not need
to include output files of any kind (stdout, stderr, or the output files you log passenger departures to).

    Before submitting your work, please make sure your code and documentation (including sections
of the README) conform to the course style guide.

    Be sure your program builds correctly using the commands make and
    make MetroSim, because we will use those commands to build your pro-
    gram in testing. Be sure to include every file required to compile your
    code, along with any tests, and your Makefile and README. You don’t
    have to give us the reference implementation. A useful test is to make a
    submission directory, copy all your files in there, then run make and see
    if the program builds. Test it, then submit everything.
